package com.example.accessingdatamysql.Equipment;

import com.example.accessingdatamysql.Tourist.Tourist;
import com.example.accessingdatamysql.Tourist.TouristRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

@Controller
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path="/equipment")
public class EquipmentController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EquipmentRepository repository;

    @CrossOrigin(origins = "http://localhost:4200")
    @RequestMapping(path="/list", method = RequestMethod.GET)
    public @ResponseBody
    Iterable<Equipment> getAll() {
        // This returns a JSON or XML with the users
        return repository.findAll();
    }

    @RequestMapping(path="/{id}", method = RequestMethod.GET)
    public @ResponseBody Equipment getById(@PathVariable int id) {
        // This returns a JSON or XML with the users
        return repository.find(id);
    }

    @RequestMapping(path="/find/{name}", method = RequestMethod.GET)
    public @ResponseBody Equipment getIdByName(@PathVariable String name) {
        // This returns a JSON or XML with the users
        return repository.findByName(name);
    }

    @RequestMapping(path="/new", method = RequestMethod.POST)
    public @ResponseBody String add
            (@RequestParam String name, @RequestParam String type, @RequestParam Float price) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Equipment instance  = new Equipment();
        instance.setPrice(price);
        instance.setType(type);
        instance.setName(name);
        repository.save(instance);
        return "Saved\n";
    }

    @RequestMapping(path="/delete/{id}", method = RequestMethod.GET)
    public @ResponseBody void delete(@PathVariable Integer id) {
        // This returns a JSON or XML with the users
        Equipment equipment = repository.find(id);
        repository.delete(equipment);
    }

    @RequestMapping(path="/update/{id}", method = RequestMethod.POST)
    public @ResponseBody String  update(@PathVariable Integer id, @RequestParam String name, @RequestParam String type, @RequestParam Float price) {
        // This returns a JSON or XML with the users
        Equipment instance = repository.find(id);
        repository.delete(instance);
        instance.setPrice(price);
        instance.setType(type);
        instance.setName(name);
        repository.save(instance);
        return "Updated\n";
    }
}