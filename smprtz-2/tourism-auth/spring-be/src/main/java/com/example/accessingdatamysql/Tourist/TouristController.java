package com.example.accessingdatamysql.Tourist;

import com.example.accessingdatamysql.Tourist.TouristRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.example.accessingdatamysql.SequrityService;

import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import com.example.accessingdatamysql.Tourist.Role;
import org.springframework.web.bind.annotation.RequestParam;
import com.example.accessingdatamysql.Tourist.TouristService;
import org.springframework.web.bind.annotation.RestController;

@Controller
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path="/tourist")
public class TouristController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TouristRepository repository;

    @Autowired
    private TouristService userService;

    @PreAuthorize("hasRole('ROLE_ADMIN')")
    @RequestMapping(path="/list", method = RequestMethod.GET)
    public @ResponseBody Iterable<Tourist> getAll() {
        // This returns a JSON or XML with the users
        return repository.findAll();
    }

    @PreAuthorize("hasRole('ROLE_ADMIN')")
    @RequestMapping(path="/{id}", method = RequestMethod.GET)
    public @ResponseBody Tourist getById(@PathVariable int id) {
        // This returns a JSON or XML with the users
        return repository.find(id);
    }

    @PreAuthorize("hasRole('ROLE_ADMIN')")
    @RequestMapping(path="/find/{name}", method = RequestMethod.GET)
    public @ResponseBody Tourist getIdByName(@PathVariable String name) {
        // This returns a JSON or XML with the users
        return repository.findByName(name);
    }

    @RequestMapping(path="/login/{email}/{password}", method = RequestMethod.GET)
    public @ResponseBody String login(@PathVariable String email, @PathVariable String password) {
        return userService.signin(email, password);
    }

    @GetMapping("/new/{name}/{email}/{password}")
    public @ResponseBody String add
            (@PathVariable String name, @PathVariable String email, @PathVariable String password) throws NoSuchAlgorithmException {
        Tourist  tourist = new Tourist();
        tourist.setName(name);
        tourist.setEmail(email);
        tourist.setPassword(password);
        List<Role> role = new ArrayList<Role>() ;
        tourist.setRole(Role.ROLE_CLIENT);
        return userService.signup(tourist);
    }

}